<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
  <body>
    <h1>Domain capabilities XML format</h1>

    <ul id="toc"></ul>

    <h2><a id="Overview">Overview</a></h2>

    <p>Sometimes, when a new domain is to be created it may come handy to know
    the capabilities of the hypervisor so the correct combination of devices and
    drivers is used. For example, when management application is considering the
    mode for a host device's passthrough there are several options depending not
    only on host, but on hypervisor in question too. If the hypervisor is qemu
    then it needs to be more recent to support VFIO, while legacy KVM is
    achievable just fine with older qemus.</p>

    <p>The main difference between
      <a href="/html/libvirt-libvirt-host.html#virConnectGetCapabilities">
        <code>virConnectGetCapabilities</code>
      </a>
    and the emulator capabilities API is, the former one aims more on
    the host capabilities (e.g.  NUMA topology, security models in
    effect, etc.) while the latter one specializes on the hypervisor
    capabilities.</p>

    <p>While the <a href="formatcaps.html">Driver Capabilities</a> provides the
    host capabilities (e.g NUMA topology, security models in effect, etc.), the
    Domain Capabilities provides the hypervisor specific capabilities for
    Management Applications to query and make decisions regarding what to
    utilize.</p>

    <p>The Domain Capabilities can provide information such as the correct
    combination of devices and drivers that are supported. Knowing which host
    and hypervisor specific options are available or supported would allow the
    management application to choose an appropriate mode for a pass-through
    host device as well as which adapter to utilize.</p>

    <p>Some XML elements may be entirely omitted from the domaincapabilities
    XML, depending on what the libvirt driver has filled in. Applications
    should only act on what is explicitly reported in the domaincapabilities
    XML. For example, if &lt;disk supported='yes'/&gt; is present, you can safely
    assume the driver supports &lt;disk&gt; devices. If &lt;disk supported='no'/&gt; is
    present, you can safely assume the driver does NOT support &lt;disk&gt;
    devices. If the &lt;disk&gt; block is omitted entirely, the driver is not
    indicating one way or the other whether it supports &lt;disk&gt; devices, and
    applications should not interpret the missing block to mean any thing in
    particular.</p>

    <h2><a id="elements">Element and attribute overview</a></h2>

    <p> A new query interface was added to the virConnect API's to retrieve the
    XML listing of the set of domain capabilities (<span class="since">Since
    1.2.7</span>):</p>

<pre>
<a href="/html/libvirt-libvirt-domain.html#virConnectGetDomainCapabilities">virConnectGetDomainCapabilities</a>
</pre>

    <p>The root element that emulator capability XML document starts with has
    name <code>domainCapabilities</code>. It contains at least four direct
    child elements:</p>

<pre>
&lt;domainCapabilities&gt;
  &lt;path&gt;/usr/bin/qemu-system-x86_64&lt;/path&gt;
  &lt;domain&gt;kvm&lt;/domain&gt;
  &lt;machine&gt;pc-i440fx-2.1&lt;/machine&gt;
  &lt;arch&gt;x86_64&lt;/arch&gt;
  ...
&lt;/domainCapabilities&gt;
</pre>
    <dl>
      <dt><code>path</code></dt>
      <dd>The full path to the emulator binary.</dd>

      <dt><code>domain</code></dt>
      <dd>Describes the <a href="formatdomain.html#elements">virtualization
          type</a> (or so called domain type).</dd>

      <dt><code>machine</code></dt>
      <dd>The domain's <a href="formatdomain.html#elementsOSBIOS">machine
          type</a>. Since not every hypervisor has a sense of machine types
          this element might be omitted in such drivers.</dd>

      <dt><code>arch</code></dt>
      <dd>The domain's <a href="formatdomain.html#elementsOSBIOS">
          architecture</a>.</dd>

    </dl>

    <h3><a id="elementsCPUAllocation">CPU Allocation</a></h3>

    <p>Before any devices capability occurs, there might be info on domain
    wide capabilities, e.g. virtual CPUs:</p>

<pre>
&lt;domainCapabilities&gt;
  ...
  &lt;vcpu max='255'/&gt;
  ...
&lt;/domainCapabilities&gt;
</pre>

    <dl>
      <dt><code>vcpu</code></dt>
      <dd>The maximum number of supported virtual CPUs</dd>
    </dl>

    <h3><a id="elementsOSBIOS">BIOS bootloader</a></h3>

    <p>Sometimes users might want to tweak some BIOS knobs or use
    UEFI. For cases like that, <a
    href="formatdomain.html#elementsOSBIOS"><code>os</code></a>
    element exposes what values can be passed to its children.</p>

<pre>
&lt;domainCapabilities&gt;
  ...
  &lt;os supported='yes'&gt;
    &lt;loader supported='yes'&gt;
      &lt;value&gt;/usr/share/OVMF/OVMF_CODE.fd&lt;/value&gt;
      &lt;enum name='type'&gt;
        &lt;value&gt;rom&lt;/value&gt;
        &lt;value&gt;pflash&lt;/value&gt;
      &lt;/enum&gt;
      &lt;enum name='readonly'&gt;
        &lt;value&gt;yes&lt;/value&gt;
        &lt;value&gt;no&lt;/value&gt;
      &lt;/enum&gt;
    &lt;/loader&gt;
  &lt;/os&gt;
  ...
&lt;domainCapabilities&gt;
</pre>

    <p>For the <code>loader</code> element, the following can occur:</p>

    <dl>
      <dt><code>value</code></dt>
      <dd>List of known loader paths. Currently this is only used
      to advertise known locations of OVMF binaries for qemu. Binaries
      will only be listed if they actually exist on disk.</dd>

      <dt><code>type</code></dt>
      <dd>Whether loader is a typical BIOS (<code>rom</code>) or
      an UEFI binary (<code>pflash</code>). This refers to
      <code>type</code> attribute of the &lt;loader/&gt;
      element.</dd>

      <dt><code>readonly</code></dt>
      <dd>Options for the <code>readonly</code> attribute of the
      &lt;loader/&gt; element.</dd>
    </dl>

    <h3><a id="elementsCPU">CPU configuration</a></h3>

    <p>
      The <code>cpu</code> element exposes options usable for configuring
      <a href="formatdomain.html#elementsCPU">guest CPUs</a>.
    </p>

<pre>
&lt;domainCapabilities&gt;
  ...
  &lt;cpu&gt;
    &lt;mode name='host-passthrough' supported='yes'/&gt;
    &lt;mode name='host-model' supported='yes'&gt;
      &lt;model fallback='allow'&gt;Broadwell&lt;/model&gt;
      &lt;vendor&gt;Intel&lt;/vendor&gt;
      &lt;feature policy='disable' name='aes'/&gt;
      &lt;feature policy='require' name='vmx'/&gt;
    &lt;/mode&gt;
    &lt;mode name='custom' supported='yes'&gt;
      &lt;model usable='no'&gt;Broadwell&lt;/model&gt;
      &lt;model usable='yes'&gt;Broadwell-noTSX&lt;/model&gt;
      &lt;model usable='no'&gt;Haswell&lt;/model&gt;
      ...
    &lt;/mode&gt;
  &lt;/cpu&gt;
  ...
&lt;domainCapabilities&gt;
</pre>

    <p>
      Each CPU mode understood by libvirt is described with a
      <code>mode</code> element which tells whether the particular mode
      is supported and provides (when applicable) more details about it:
    </p>

    <dl>
      <dt><code>host-passthrough</code></dt>
      <dd>No mode specific details are provided.</dd>

      <dt><code>host-model</code></dt>
      <dd>
        If <code>host-model</code> is supported by the hypervisor, the
        <code>mode</code> describes the guest CPU which will be used when
        starting a domain with <code>host-model</code> CPU. The hypervisor
        specifics (such as unsupported CPU models or features, machine type,
        etc.) may be accounted for in this guest CPU specification and thus
        the CPU can be different from the one shown in host capabilities XML.
        This is indicated by the <code>fallback</code> attribute of the
        <code>model</code> sub element: <code>allow</code> means not all
        specifics were accounted for and thus the CPU a guest will see may
        be different; <code>forbid</code> indicates that the CPU a guest will
        see should match this CPU definition.
      </dd>

      <dt><code>custom</code></dt>
      <dd>
        The <code>mode</code> element contains a list of supported CPU
        models, each described by a dedicated <code>model</code> element.
        The <code>usable</code> attribute specifies whether the model can
        be used on the host. A special value <code>unknown</code> indicates
        libvirt does not have enough information to provide the usability
        data.
      </dd>
    </dl>

    <h3><a id="elementsIothreads">I/O Threads</a></h3>

    <p>
      The <code>iothread</code> elements indicates whether or not
      <a href="formatdomain.html#elementsIOThreadsAllocation">I/O threads</a>
      are supported.
    </p>

<pre>
&lt;domainCapabilities&gt;
  ...
  &lt;iothread supported='yes'/&gt;
  ...
&lt;domainCapabilities&gt;
</pre>

    <h3><a id="elementsDevices">Devices</a></h3>

    <p>
      Another set of XML elements describe the supported devices and their
      capabilities. All devices occur as children of the main
      <code>devices</code> element.
    </p>

<pre>
&lt;domainCapabilities&gt;
  ...
  &lt;devices&gt;
    &lt;disk supported='yes'&gt;
      &lt;enum name='diskDevice'&gt;
        &lt;value&gt;disk&lt;/value&gt;
        &lt;value&gt;cdrom&lt;/value&gt;
        &lt;value&gt;floppy&lt;/value&gt;
        &lt;value&gt;lun&lt;/value&gt;
      &lt;/enum&gt;
      ...
    &lt;/disk&gt;
    &lt;hostdev supported='no'/&gt;
  &lt;/devices&gt;
&lt;/domainCapabilities&gt;
</pre>

    <p>Reported capabilities are expressed as an enumerated list of available
    options for each of the element or attribute.  For example, the
    &lt;disk/&gt; element has an attribute <code>device</code> which can
    support the values <code>disk</code>, <code>cdrom</code>,
    <code>floppy</code>, or <code>lun</code>.</p>

    <h4><a id="elementsDisks">Hard drives, floppy disks, CDROMs</a></h4>
    <p>Disk capabilities are exposed under the <code>disk</code> element. For
    instance:</p>

<pre>
&lt;domainCapabilities&gt;
  ...
  &lt;devices&gt;
    &lt;disk supported='yes'&gt;
      &lt;enum name='diskDevice'&gt;
        &lt;value&gt;disk&lt;/value&gt;
        &lt;value&gt;cdrom&lt;/value&gt;
        &lt;value&gt;floppy&lt;/value&gt;
        &lt;value&gt;lun&lt;/value&gt;
      &lt;/enum&gt;
      &lt;enum name='bus'&gt;
        &lt;value&gt;ide&lt;/value&gt;
        &lt;value&gt;fdc&lt;/value&gt;
        &lt;value&gt;scsi&lt;/value&gt;
        &lt;value&gt;virtio&lt;/value&gt;
        &lt;value&gt;xen&lt;/value&gt;
        &lt;value&gt;usb&lt;/value&gt;
        &lt;value&gt;sata&lt;/value&gt;
        &lt;value&gt;sd&lt;/value&gt;
      &lt;/enum&gt;
    &lt;/disk&gt;
    ...
  &lt;/devices&gt;
&lt;/domainCapabilities&gt;
</pre>

    <dl>
      <dt><code>diskDevice</code></dt>
      <dd>Options for the <code>device</code> attribute of the &lt;disk/&gt;
      element.</dd>

      <dt><code>bus</code></dt>
      <dd>Options for the <code>bus</code> attribute of the &lt;target/&gt;
      element for a &lt;disk/&gt;.</dd>
    </dl>


    <h4><a id="elementsGraphics">Graphical framebuffers</a></h4>
    <p>Graphics device capabilities are exposed under the
    <code>graphics</code> element. For instance:</p>

<pre>
&lt;domainCapabilities&gt;
  ...
  &lt;devices&gt;
    &lt;graphics supported='yes'&gt;
      &lt;enum name='type'&gt;
        &lt;value&gt;sdl&lt;/value&gt;
        &lt;value&gt;vnc&lt;/value&gt;
        &lt;value&gt;spice&lt;/value&gt;
      &lt;/enum&gt;
    &lt;/graphics&gt;
    ...
  &lt;/devices&gt;
&lt;/domainCapabilities&gt;
</pre>

    <dl>
      <dt><code>type</code></dt>
      <dd>Options for the <code>type</code> attribute of the &lt;graphics/&gt;
      element.</dd>
    </dl>


    <h4><a id="elementsVideo">Video device</a></h4>
    <p>Video device capabilities are exposed under the
    <code>video</code> element. For instance:</p>

<pre>
&lt;domainCapabilities&gt;
  ...
  &lt;devices&gt;
    &lt;video supported='yes'&gt;
      &lt;enum name='modelType'&gt;
        &lt;value&gt;vga&lt;/value&gt;
        &lt;value&gt;cirrus&lt;/value&gt;
        &lt;value&gt;vmvga&lt;/value&gt;
        &lt;value&gt;qxl&lt;/value&gt;
        &lt;value&gt;virtio&lt;/value&gt;
      &lt;/enum&gt;
    &lt;/video&gt;
    ...
  &lt;/devices&gt;
&lt;/domainCapabilities&gt;
</pre>

    <dl>
      <dt><code>modelType</code></dt>
      <dd>Options for the <code>type</code> attribute of the
      &lt;video&gt;&lt;model&gt; element.</dd>
    </dl>


    <h4><a id="elementsHostDev">Host device assignment</a></h4>
    <p>Some host devices can be passed through to a guest (e.g. USB, PCI and
    SCSI). Well, only if the following is enabled:</p>

<pre>
&lt;domainCapabilities&gt;
  ...
  &lt;devices&gt;
    &lt;hostdev supported='yes'&gt;
      &lt;enum name='mode'&gt;
        &lt;value&gt;subsystem&lt;/value&gt;
        &lt;value&gt;capabilities&lt;/value&gt;
      &lt;/enum&gt;
      &lt;enum name='startupPolicy'&gt;
        &lt;value&gt;default&lt;/value&gt;
        &lt;value&gt;mandatory&lt;/value&gt;
        &lt;value&gt;requisite&lt;/value&gt;
        &lt;value&gt;optional&lt;/value&gt;
      &lt;/enum&gt;
      &lt;enum name='subsysType'&gt;
        &lt;value&gt;usb&lt;/value&gt;
        &lt;value&gt;pci&lt;/value&gt;
        &lt;value&gt;scsi&lt;/value&gt;
      &lt;/enum&gt;
      &lt;enum name='capsType'&gt;
        &lt;value&gt;storage&lt;/value&gt;
        &lt;value&gt;misc&lt;/value&gt;
        &lt;value&gt;net&lt;/value&gt;
      &lt;/enum&gt;
      &lt;enum name='pciBackend'&gt;
        &lt;value&gt;default&lt;/value&gt;
        &lt;value&gt;kvm&lt;/value&gt;
        &lt;value&gt;vfio&lt;/value&gt;
        &lt;value&gt;xen&lt;/value&gt;
      &lt;/enum&gt;
    &lt;/hostdev&gt;
  &lt;/devices&gt;
&lt;/domainCapabilities&gt;
</pre>

    <dl>
      <dt><code>mode</code></dt>
      <dd>Options for the <code>mode</code> attribute of the &lt;hostdev/&gt;
      element.</dd>

      <dt><code>startupPolicy</code></dt>
      <dd>Options for the <code>startupPolicy</code> attribute of the
      &lt;hostdev/&gt; element.</dd>

      <dt><code>subsysType</code></dt>
      <dd>Options for the <code>type</code> attribute of the &lt;hostdev/&gt;
      element in case of <code>mode="subsystem"</code>.</dd>

      <dt><code>capsType</code></dt>
      <dd>Options for the <code>type</code> attribute of the &lt;hostdev/&gt;
      element in case of <code>mode="capabilities"</code>.</dd>

      <dt><code>pciBackend</code></dt>
      <dd>Options for the <code>name</code> attribute of the &lt;driver/&gt;
      element.</dd>
    </dl>

    <h3><a id="elementsFeatures">Features</a></h3>

    <p>One more set of XML elements describe the supported features and
    their capabilities. All features occur as children of the main
    <code>features</code> element.</p>

<pre>
&lt;domainCapabilities&gt;
  ...
  &lt;features&gt;
    &lt;gic supported='yes'&gt;
      &lt;enum name='version'&gt;
        &lt;value&gt;2&lt;/value&gt;
        &lt;value&gt;3&lt;/value&gt;
      &lt;/enum&gt;
    &lt;/gic&gt;
    &lt;vmcoreinfo supported='yes'/&gt;
    &lt;genid supported='yes'/&gt;
    &lt;sev&gt;
      &lt;cbitpos&gt;47&lt;/cbitpos&gt;
      &lt;reduced-phys-bits&gt;1&lt;/reduced-phys-bits&gt;
    &lt;/sev&gt;
  &lt;/features&gt;
&lt;/domainCapabilities&gt;
</pre>

    <p>Reported capabilities are expressed as an enumerated list of
    possible values for each of the elements or attributes. For example, the
    <code>gic</code> element has an attribute <code>version</code> which can
    support the values <code>2</code> or <code>3</code>.</p>

    <p>For information about the purpose of each feature, see the
    <a href="formatdomain.html#elementsFeatures">relevant section</a> in
    the domain XML documentation.
    </p>

    <h4><a id="elementsGIC">GIC capabilities</a></h4>

    <p>GIC capabilities are exposed under the <code>gic</code> element.</p>

    <dl>
      <dt><code>version</code></dt>
      <dd>Options for the <code>version</code> attribute of the
      <code>gic</code> element.</dd>
    </dl>

    <h4><a id="elementsvmcoreinfo">vmcoreinfo</a></h4>

    <p>Reports whether the vmcoreinfo feature can be enabled.</p>

    <h4><a id="elementsgenid">genid</a></h4>

    <p>Reports whether the genid feature can be used by the domain.</p>

    <h4><a id="elementsSEV">SEV capabilities</a></h4>

    <p>AMD Secure Encrypted Virtualization (SEV) capabilities are exposed under
    the <code>sev</code> element.
    SEV is an extension to the AMD-V architecture which supports running
    virtual machines (VMs) under the control of a hypervisor. When supported,
    guest owner can create a VM whose memory contents will be transparently
    encrypted with a key unique to that VM.</p>

    <p>
    For more details on SEV feature see:
      <a href="https://support.amd.com/TechDocs/55766_SEV-KM_API_Specification.pdf">
        SEV API spec</a> and <a href="http://amd-dev.wpengine.netdna-cdn.com/wordpress/media/2013/12/AMD_Memory_Encryption_Whitepaper_v7-Public.pdf">
        SEV White Paper</a>
    </p>

    <dl>
      <dt><code>cbitpos</code></dt>
      <dd>When memory encryption is enabled, one of the physical address bits
      (aka the C-bit) is utilized to mark if a memory page is protected. The
      C-bit position is Hypervisor dependent.</dd>
      <dt><code>reducedPhysBits</code></dt>
      <dd>When memory encryption is enabled, we lose certain bits in physical
      address space. The number of bits we lose is hypervisor dependent.</dd>
    </dl>

  </body>
</html>
